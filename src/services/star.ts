import { Game, GameSettings } from "../types/game";
import { Location } from "../types/location";
import { Player } from "../types/player";
import { Star, NaturalResources, InfrastructureType } from "../types/star";
import { ObjectId } from "../types/object_id";
import StarDistanceService from "./star_distance";
import { Rand } from "../rand";

const StarService = {
  setupHomeStar(
    game: Game,
    homeStar: Star,
    player: Player,
    gameSettings: GameSettings
  ) {
    // Set up the home star
    player.homeStarId = homeStar.id;
    homeStar.ownedByPlayerId = player.id;
    homeStar.shipsActual = Math.max(gameSettings.player.startingShips, 1); // Must be at least 1 star at the home star so that a carrier can be built there.
    homeStar.ships = homeStar.shipsActual;
    homeStar.homeStar = true;
    homeStar.warpGate = false;
    homeStar.specialistId = null;

    this.resetIgnoreBulkUpgradeStatuses(homeStar);

    if (gameSettings.galaxy.galaxyType !== "custom") {
      homeStar.naturalResources.economy =
        game.constants.star.resources.maxNaturalResources;
      homeStar.naturalResources.industry =
        game.constants.star.resources.maxNaturalResources;
      homeStar.naturalResources.science =
        game.constants.star.resources.maxNaturalResources;
    }

    // Seed the home star with the starting infrastructure.
    homeStar.infrastructure.economy =
      gameSettings.player.startingInfrastructure.economy;
    homeStar.infrastructure.industry =
      gameSettings.player.startingInfrastructure.industry;
    homeStar.infrastructure.science =
      gameSettings.player.startingInfrastructure.science;
  },
  setupPlayerStarForGameStart(game: Game, star: Star, player: Player) {
    if (player.homeStarId === star.id) {
      this.setupHomeStar(game, star, player, game.settings);
    } else {
      star.ownedByPlayerId = player.id;
      star.shipsActual = game.settings.player.startingShips;
      star.ships = star.shipsActual;
      star.warpGate = false; // TODO: BUG - This resets warp gates generated by map terrain.
      star.specialistId = null;

      if (game.settings.player.developmentCost.economy !== "none") {
        star.infrastructure.economy = 0;
      }

      if (game.settings.player.developmentCost.industry !== "none") {
        star.infrastructure.industry = 0;
      }

      if (game.settings.player.developmentCost.science !== "none") {
        star.infrastructure.science = 0;
      }

      this.resetIgnoreBulkUpgradeStatuses(star);
    }
  },
  setupStarsForGameStart(game: Game) {
    // If any of the development costs are set to null then we need to randomly
    // assign a portion of stars for each type to be seeded with the starting infrastructure.
    // For example, if eco is disabled then each star in the galaxy will have a 1 in 3 chance of being seeded with eco.
    // Note that we will not allow a mix of seeds, a star can only be seeded with one infrastructure type.
    if (
      game.settings.player.developmentCost.economy !== "none" &&
      game.settings.player.developmentCost.industry !== "none" &&
      game.settings.player.developmentCost.science !== "none"
    ) {
      return;
    }

    // Note: Because each setting is independent, we only want to seed the
    // ones where the development cost is set to none.
    const types: (InfrastructureType | null)[] = [
      game.settings.player.developmentCost.economy === "none"
        ? "economy"
        : null,
      game.settings.player.developmentCost.industry === "none"
        ? "industry"
        : null,
      game.settings.player.developmentCost.science === "none"
        ? "science"
        : null,
    ];

    for (let star of game.galaxy.stars) {
      const i = game.rand.getRandomNumberBetween(0, types.length - 1);
      const type = types[i];

      if (type == null) {
        continue;
      }

      star.infrastructure[type] =
        game.settings.player.startingInfrastructure[type];
    }
  },
  generateUnownedStar(
    name: string,
    location: Location,
    resources: NaturalResources
  ): Star {
    const naturalResources = resources || {
      economy: 0,
      industry: 0,
      science: 0,
    };

    return {
      id: crypto.randomUUID(),
      name,
      location,
      naturalResources,
      infrastructure: {
        economy: 0,
        industry: 0,
        science: 0,
      },
      ships: null,
      specialistExpireTick: null,
      ownedByPlayerId: null,
      specialistId: null,
      homeStar: false,
      warpGate: false,
      isNebula: false,
      isAsteroidField: false,
      isBinaryStar: false,
      isBlackHole: false,
      isPulsar: false,
      wormHoleToStarId: null,
    };
  },
  generateCustomGalaxyStar(name: string, star: Star): Star {
    return {
      id: star.id,
      name: name,
      naturalResources: star.naturalResources,
      location: star.location,
      infrastructure: star.infrastructure,
      homeStar: star.homeStar,
      warpGate: star.warpGate,
      isNebula: star.isNebula,
      isAsteroidField: star.isAsteroidField,
      isBinaryStar: star.isBinaryStar,
      isBlackHole: star.isBlackHole,
      isPulsar: star.isPulsar,
      wormHoleToStarId: star.wormHoleToStarId,
      specialistId: star.specialistId,
      ships: null,
      specialistExpireTick: null,
      ownedByPlayerId: null,
    };
  },
  getById(game: Game, id: ObjectId | string) {
    return game.galaxy.stars.find((s) => s.id === id);
  },
  listStarsOwnedByPlayer(stars: Star[], playerId: ObjectId) {
    return stars.filter(
      (s) =>
        s.ownedByPlayerId &&
        s.ownedByPlayerId.toString() === playerId.toString()
    );
  },
  getPlayerHomeStar(stars: Star[], player: Player) {
    return this.listStarsOwnedByPlayer(stars, player.id).find(
      (s) => s.id === player.homeStarId
    );
  },
  getKingOfTheHillStar(game: Game) {
    const center = StarDistanceService.getGalacticCenter();

    return game.galaxy.stars.find(
      (s) => s.location.x === center.x && s.location.y === center.y
    )!;
  },
  resetIgnoreBulkUpgradeStatuses(star: Star) {
    star.ignoreBulkUpgrade = {
      economy: false,
      industry: false,
      science: false,
    };

    return star.ignoreBulkUpgrade;
  },
  isKingOfTheHillStar(star: Star) {
    const center = StarDistanceService.getGalacticCenter();

    return star.location.x === center.x && star.location.y === center.y;
  },
  isDeadStar(star: Star) {
    if (!star.naturalResources) {
      return true;
    }

    return (
      star.naturalResources.economy <= 0 &&
      star.naturalResources.industry <= 0 &&
      star.naturalResources.science <= 0
    );
  },
};

export default StarService;
